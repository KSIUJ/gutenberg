services:
  db:
    image: postgres:17.6-alpine
    container_name: gutenberg-db
    environment:
      POSTGRES_USER: gutenberg
      POSTGRES_DB: gutenberg
      POSTGRES_PASSWORD_FILE: /run/secrets/gutenberg_postgres_password
    volumes:
      - gutenberg_postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      # Replace the values of -U and -d with the name of the user and database if changed.
      test: [ "CMD-SHELL", "pg_isready -U gutenberg -d gutenberg" ]
      interval: 1s
      retries: 10
      timeout: 5s
    secrets:
      - gutenberg_postgres_password

  # TODO: Add a password for an extra security.
  redis:
    image: redis:8.2-alpine
    container_name: gutenberg-redis
    restart: always

  # TODO: Add a custom config which limits which ports and hosts CUPS can be accessed from.
  #       Use either a custom target or a mount.
  # TODO: Enable some authentication mechanism to prevent unauthorized access.
  #       CUPS can currently be accessed from any host and with the default username and password.
  # TODO: Proxy the CUPS admin panel via Nginx.
  #       Other routes, like the CUPS IPP endpoint, probably should not be proxied.
  cups:
    image: olbat/cupsd:stable-2025-08-18
    container_name: gutenberg-cups
    restart: always

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: run_backend
    container_name: gutenberg-backend
    volumes:
      - gutenberg_backend_logs:/var/log/gutenberg
      - gutenberg_backend_data:/var/lib/gutenberg
      - type: bind
        source: ./backend/gutenberg/settings/docker_settings.py
        target: /etc/gutenberg/docker_settings.py
        read_only: true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always
    secrets:
      - gutenberg_postgres_password
#      - gutenberg_redis_password
      - gutenberg_django_secret_key

  celery:
    build:
      context: .
      dockerfile: Dockerfile
      target: run_celery
    container_name: gutenberg-celery
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      cups:
        condition: service_started
    volumes:
      - gutenberg_backend_logs:/var/log/gutenberg
      - gutenberg_backend_data:/var/lib/gutenberg
      - type: bind
        source: ./backend/gutenberg/settings/docker_settings.py
        target: /etc/gutenberg/docker_settings.py
        read_only: true
    restart: always
    secrets:
      - gutenberg_postgres_password
#      - gutenberg_redis_password
      - gutenberg_django_secret_key

    # The cap_add SYS_ADMIN and privileged settings allow bubblewrap to run inside the container.
    # The security implications of these changes have not been properly reviewed.
    # FIXME: These settings should probably me more restrictive.
    #
    # Some relevant links:
    # - https://docs.docker.com/engine/security/apparmor/
    # - https://docs.docker.com/engine/security/seccomp/
    cap_add:
      - SYS_ADMIN
    privileged: true

  proxy:
    build:
      context: .
      dockerfile: Dockerfile
      target: run_nginx
    container_name: gutenberg-proxy
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: always

volumes:
  gutenberg_postgres_data:
  gutenberg_backend_logs:
  gutenberg_backend_data:

# Docker Compose only supports loading secrets from files or environment variables
# https://docs.docker.com/reference/compose-file/secrets/
# These secrets should be randomly generated, for example, using commands like:
#   openssl rand -base64 32 > ./secrets/postgres_password.txt
secrets:
  gutenberg_postgres_password:
    file: ./secrets/postgres_password.txt
#  gutenberg_redis_password:
#    file: ./secrets/redis_password.txt
  gutenberg_django_secret_key:
    file: ./secrets/django_secret_key.txt
