from .base import *

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'n7+3u12_59wy_kzvecb^w^jrpi(m#(gl8^qe92kvclkd9!=-h)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

OIDC_APP_BASE_URL = 'https://yourapp.com/'

# Set user's Django groups to the roles from the access token claims.
# Roles from the `realm_access.roles` claim will be saved as groups with the names `oidc.realm.{group_name}`.
# Roles from the `resource_access.{client_id}.roles` claim will be saved as `oidc.client.{group_name}`.
# If the user is in any other group with a name starting with `oidc.`, it will be removed.
# See https://www.keycloak.org/docs/latest/server_admin/index.html#_oidc_token_role_mappings for more details.
OIDC_SYNC_ROLES_AS_GROUPS = True

# Sets or unsets the User.is_staff and User.is_superuser fields
# if the user's `realm_access.roles` or `resource_access.${client_id}.roles` claims contain the specified role.
# The settings are tuples in the form `('realm', role_name)` or `('client', role_name)`.
# Set to None to disable this feature.
# See https://www.keycloak.org/docs/latest/server_admin/index.html#_oidc_token_role_mappings for more details.
OIDC_STAFF_ROLE = ('client', 'gutenberg-staff')
OIDC_SUPERUSER_ROLE = ('client', 'gutenberg-superuser')

# Uncomment these lines to enable OpenID Connect authentication.
# AUTHENTICATION_BACKENDS = (
#     'django.contrib.auth.backends.ModelBackend',
#     'kdi_oidc_django.backends.OidcAuthBackend',
# )

# Celery
CELERY_BROKER_URL = 'redis://localhost:6379'

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
