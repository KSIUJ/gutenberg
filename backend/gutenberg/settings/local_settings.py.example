from .base import *

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'n7+3u12_59wy_kzvecb^w^jrpi(m#(gl8^qe92kvclkd9!=-h)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Uncomment lines below to enable Open ID Connect auth:
#
# KSI_AUTH_PROVIDER = {
#     # For example https://auth.ksi.ii.uj.edu.pl/auth/realms/KSI
#     # The auth plugin will reach https://auth.ksi.ii.uj.edu.pl/auth/realms/KSI/.well-known/openid-configuration
#     # for configuration discovery
#     'issuer': '#####',
#
#     # SECURITY: Do not check these secrets into version control!
#     'client_id': '#####',
#     'client_secret': '#####',
#
#     # Set user's Django groups to the roles from the access token claims.
#     # Note that this will also remove the user from the groups that are not present in the access token.
#     'sync_roles_as_groups': True,
#
#     # Sets or unsets the User.is_staff and User.is_superuser fields
#     # if the access token contains claims for these roles.
#     # Set to None to disable this feature.
#     'staff_role': 'gutenberg-admin',
#     'superuser_role': 'gutenberg-admin',
# }
#
# AUTHENTICATION_BACKENDS = (
#     'django.contrib.auth.backends.ModelBackend',
#     'kdi_oidc_django.backends.KsiAuthBackend',
# )

# Celery
CELERY_BROKER_URL = 'redis://localhost:6379'

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
