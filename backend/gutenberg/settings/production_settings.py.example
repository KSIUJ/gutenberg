from .base import *

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ''

ALLOWED_HOSTS = []

STATIC_ROOT = '/var/www/gutenberg/static'

# Admin e-mail addresses to send messages to when errors occur
ADMINS = []

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'gutenberg',
        'USER': 'gutenberg',
        'PASSWORD': '',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

# Logging
LOGGING['handlers']['print_file']['filename'] = '/var/log/gutenberg/print.log'
LOGGING['handlers']['django_file']['filename'] = '/var/log/gutenberg/django.log'

# Printing
# Directory to store the printed files in
MEDIA_ROOT = '/srv/printing/'

# Uncomment lines below to enable Open ID Connect auth:
#
# KSI_AUTH_PROVIDER = {
#     # For example https://auth.ksi.ii.uj.edu.pl/auth/realms/KSI
#     # The auth plugin will reach https://auth.ksi.ii.uj.edu.pl/auth/realms/KSI/.well-known/openid-configuration
#     # for configuration discovery
#     'issuer': '#####',
#
#     # SECURITY: Do not check these secrets into version control!
#     'client_id': '#####',
#     'client_secret': '#####',
#
#     # Set user's Django groups to the roles from the access token claims.
#     # Note that this will also remove the user from the groups that are not present in the access token.
#     'sync_roles_as_groups': True,
#
#     # Sets or unsets the User.is_staff and User.is_superuser fields
#     # if the access token contains claims for these roles.
#     # Set to None to disable this feature.
#     'staff_role': 'gutenberg-admin',
#     'superuser_role': 'gutenberg-admin',
# }
#
# AUTHENTICATION_BACKENDS = (
#     'django.contrib.auth.backends.ModelBackend',
#     'ksi_oidc_django.backends.KsiAuthBackend',
# )

# Celery
CELERY_BROKER_URL = 'redis://localhost:6379'

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
