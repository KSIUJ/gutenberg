from .base import *

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ''

# https://docs.djangoproject.com/en/5.2/ref/settings/#allowed-hosts
# Example value: [yoursite.example.com]
ALLOWED_HOSTS = []

# https://docs.djangoproject.com/en/5.2/ref/settings/#std-setting-CSRF_TRUSTED_ORIGINS
# Example value: [https://yoursite.example.com]
CSRF_TRUSTED_ORIGINS = []

STATIC_ROOT = '/var/www/gutenberg/static'

# This is a custom setting which controls how the index.html file is served for the SPA webapp.
# All webapp routes are handled by the Django server to handle authentication.
# If enabled, Django will instruct Nginx to serve the index.html file using the X-Accel-Redirect header.
# If disabled, django.contrib.staticfiles will be used to serve the file.
# See backend/printing/views.py
NGINX_ACCEL_ENABLED=True

# Admin e-mail addresses to send messages to when errors occur
ADMINS = []

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'gutenberg',
        'USER': 'gutenberg',
        'PASSWORD': '',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379",
    }
}

# Logging
LOGGING['handlers']['print_file']['filename'] = '/var/log/gutenberg/print.log'
LOGGING['handlers']['django_file']['filename'] = '/var/log/gutenberg/django.log'

# Printing
# Directory to store the printed files in
MEDIA_ROOT = '/srv/printing/'

OIDC_APP_BASE_URL = 'https://yourapp.com/'

# Set user's Django groups to the roles from the access token claims.
# Roles from the `realm_access.roles` claim will be saved as groups with the names `oidc.realm.{group_name}`.
# Roles from the `resource_access.{client_id}.roles` claim will be saved as `oidc.client.{group_name}`.
# If the user is in any other group with a name starting with `oidc.`, it will be removed.
# See https://www.keycloak.org/docs/latest/server_admin/index.html#_oidc_token_role_mappings for more details.
OIDC_SYNC_ROLES_AS_GROUPS = True

# Sets or unsets the User.is_staff and User.is_superuser fields
# if the user's `realm_access.roles` or `resource_access.${client_id}.roles` claims contain the specified role.
# The settings are tuples in the form `('realm', role_name)` or `('client', role_name)`.
# Set to None to disable this feature.
# See https://www.keycloak.org/docs/latest/server_admin/index.html#_oidc_token_role_mappings for more details.
OIDC_STAFF_ROLE = ('client', 'gutenberg-staff')
OIDC_SUPERUSER_ROLE = ('client', 'gutenberg-superuser')

# Uncomment these lines to enable OpenID Connect authentication.
# AUTHENTICATION_BACKENDS = (
#     'django.contrib.auth.backends.ModelBackend',
#     'ksi_oidc_django.backends.OidcAuthBackend',
# )

# Celery
CELERY_BROKER_URL = 'redis://localhost:6379'

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
